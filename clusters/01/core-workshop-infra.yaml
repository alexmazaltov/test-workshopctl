# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: workshopctl
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: code-server
  namespace: workshopctl
  labels:
    app: code-server
data:
  config: |-
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        server: https://kubernetes.default
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
---
# Source: core-workshop-infra/templates/traefik-2.yaml
### ConfigMap, Deployment & Service ###
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-cfg
  namespace: workshopctl
  labels:
    app: traefik
data:
  api.yaml: |-
    http:
      routers:
        my-api:
          rule: Host(`traefik.cluster-01.workshopctl.kubernetesfinland.com`)
          service: api@internal
          entryPoints:
          - traefik
          middlewares:
          - api-auth
      middlewares:
        api-auth:
          basicAuth:
            users:
            # This value is replaced on-demand from the given env var, that comes from a Secret
            - "{{ env "CLUSTER_BASIC_AUTH_BCRYPT" }}"
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: code-server
  namespace: workshopctl
---
# Source: core-workshop-infra/templates/external-dns.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-dns
  namespace: workshopctl
---
# Source: core-workshop-infra/templates/traefik-2.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik
  namespace: workshopctl
---
# Source: core-workshop-infra/templates/external-dns.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-dns
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "watch", "list"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["list"]
---
# Source: core-workshop-infra/templates/traefik-2.yaml
### RBAC ###
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io
    resources:
      - ingresses
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: code-server
  namespace: workshopctl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: code-server
    namespace: workshopctl
---
# Source: core-workshop-infra/templates/external-dns.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-dns-viewer
  namespace: workshopctl
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-dns
subjects:
  - kind: ServiceAccount
    name: external-dns
    namespace: workshopctl
---
# Source: core-workshop-infra/templates/traefik-2.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: workshopctl
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: code-server
  namespace: workshopctl
spec:
  selector:
    app: code-server
  ports:
    - port: 80
      targetPort: 8080
      name: http
---
# Source: core-workshop-infra/templates/traefik-2.yaml
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: workshopctl
  labels:
    app: traefik
spec:
  ports:
    - name: http
      port: 80
    - name: https
      port: 443
    # Allows access to the Traefik UI. For demo usage only.
    - name: admin
      port: 8080
  selector:
    app: traefik
  type: LoadBalancer
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: code-server
  namespace: workshopctl
  labels:
    app: code-server
spec:
  selector:
    matchLabels:
      app: code-server
  template:
    metadata:
      labels:
        app: code-server
    spec:
      serviceAccountName: code-server
      containers:
        - image: luxas/k8s-web-ide:v2.1.1
          # TODO: In the future: ghcr.io/cloud-native-nordics/k8s-web-ide:v0.2.0
          imagePullPolicy: Always
          name: code-server
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: TUTORIALS_REPO
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: TUTORIALS_REPO
            - name: TUTORIALS_DIR
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: TUTORIALS_DIR
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: CLUSTER_PASSWORD
          volumeMounts:
            - name: kubeconfig
              mountPath: /home/coder/.kube
            - name: docker
              mountPath: /var/run/docker.sock
      volumes:
        - name: kubeconfig
          configMap:
            name: code-server
        - name: docker
          hostPath:
            path: /var/run/docker.sock
---
# Source: core-workshop-infra/templates/external-dns.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-dns
  namespace: workshopctl
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: external-dns
  template:
    metadata:
      labels:
        app: external-dns
    spec:
      serviceAccountName: external-dns
      containers:
        - name: external-dns
          image: k8s.gcr.io/external-dns/external-dns:v0.7.3
          args:
            # Watch Ingress objects and create DNS records correspondingly 
            - --source=ingress
            # Makes ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
            - --domain-filter=workshopctl.kubernetesfinland.com.
            - --provider=digitalocean
            # Prevents ExternalDNS from deleting any records, omit to enable full synchronization
            - --policy=upsert-only
            - --registry=txt
            - --txt-owner-id=workshopctl
            # Resync often as this is a highly dynamic system
            - --interval=30s
            - --log-level=debug
            # Possibly in the future, add --events support
            # PROVIDER-CUSTOMIZE: Need to set per-provider ENV VARs here
          env:
            - name: DO_TOKEN
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: DNS_PROVIDER_SERVICEACCOUNT
---
# Source: core-workshop-infra/templates/traefik-2.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: workshopctl
  labels:
    app: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik
      containers:
        - name: traefik
          image: traefik:v2.3
          args:
            - --api=true
            - --metrics.prometheus=true
            - --accesslog=true
            - --accesslog.filepath=/traefik-cache/access.log
            - --log.level=DEBUG
            - --providers.file.directory=/traefik-cfg
            - --providers.file.watch=true
            - --providers.kubernetesingress=true
            - --providers.kubernetesingress.ingressendpoint.publishedservice=workshopctl/traefik
            - --entrypoints.web.address=:80
            - --entrypoints.web.http.redirections.entrypoint.to=websecure
            - --entrypoints.web.http.redirections.entrypoint.scheme=https
            - --entrypoints.websecure.address=:443
            - --entrypoints.websecure.http.tls.certresolver=letsencrypt
            - --entrypoints.traefik.address=:8080
            - --entrypoints.traefik.http.tls.certresolver=letsencrypt
            - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
            - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=$(TRAEFIK_DNS_PROVIDER)
            - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
            - --certificatesresolvers.letsencrypt.acme.email=$(LETSENCRYPT_EMAIL)
            - --certificatesresolvers.letsencrypt.acme.storage=/traefik-cache/acme.json
          # Please note that this is the staging Let's Encrypt server.
          # Once you get things working, you should remove that whole line altogether.
          # - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
            - name: admin
              containerPort: 8080
            - name: admin-http
              containerPort: 8080
          env:
            - name: LETSENCRYPT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: LETSENCRYPT_EMAIL
            - name: TRAEFIK_DNS_PROVIDER
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: TRAEFIK_DNS_PROVIDER
            - # This is used in the "static configuration" for the Traefik API
              name: CLUSTER_BASIC_AUTH_BCRYPT
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: CLUSTER_BASIC_AUTH_BCRYPT
            - name: DO_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: workshopctl
                  key: DNS_PROVIDER_SERVICEACCOUNT
          # PROVIDER-CUSTOMIZE: Here there needs to be one more dynamic "patch" that makes Traefik able to
          # access the DNS token
          volumeMounts:
            - name: traefik-cfg
              mountPath: /traefik-cfg
            - name: traefik-cache
              mountPath: /traefik-cache
      volumes:
        - name: traefik-cfg
          configMap:
            name: traefik-cfg
        - name: traefik-cache
          emptyDir: {}
---
# Source: core-workshop-infra/templates/code-server.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-server
  namespace: workshopctl
  annotations:
    # Force a short TTL so that DNS record changes can propagate faster
    external-dns.alpha.kubernetes.io/ttl: "30s"
spec:
  ingressClassName: traefik
  rules:
    - host: "cluster-01.workshopctl.kubernetesfinland.com"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: code-server
                port:
                  number: 80
---
# Source: core-workshop-infra/templates/traefik-2.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: traefik
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: traefik.io/ingress-controller
